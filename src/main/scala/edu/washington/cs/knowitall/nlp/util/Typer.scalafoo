package edu.washington.cs.knowitall.nlp.util

/**
 * Created with IntelliJ IDEA.
 * User: niranjan
 * Date: 7/14/12
 * Time: 12:21 PM
 * To change this template use File | Settings | File Templates.
 */


import scala.collection.JavaConversions._

object Type{

  def fromTypeString(typeStr: String): Option[Type] = {
    val splits = typeStr.split(":")
    if (splits.size > 3){
      try{
        Some(new Type(splits(0), splits(1), splits(2), splits(3).toDouble))
      }catch{
        case e:Exception => {
          println("Caught exception converting to Type object from string: " + splits.mkString(":"))
          None
        }
      }
    }else{

      None
    }

  }

  def fromTypesString(typesString:String):Seq[Type] = typesString.split(",").map(ts => fromTypeString(ts)).map(t => t.getOrElse(NoType))

  def typesToString(types:Seq[Type]) = types.map(atype => atype.toString(":")).mkString(",")
}

case class Type(val name:String, val identifier:String, val source:String, val confidence:Double){

  def isNoType:Boolean = NoType.name.equals(name)


  var sourceText = ""


  override def toString: String = toString("\t")

  def toString(sep:String): String
  = name + sep + identifier + sep + source + sep + confidence.toString + sep + sourceText

}

object NoType extends Type("NA", "NA", "NA", -1.0)


abstract class Typer {

  def assignTypes(argument:String, context:Any):Seq[Type];


}





